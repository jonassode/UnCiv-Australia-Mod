# .github/workflows/create_tilemap.yml
name: Create Tilemap and Atlas

# Controls when the action will run. 
# This example triggers the workflow on push events to the "main" branch.
# You can change this to run on a schedule, on pull requests, or manually.
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  generate-tilemap:
    runs-on: ubuntu-latest
    
    # Environment variables can be used to easily configure the workflow.
    # Add the paths to your image folders here, separated by spaces.
    env:
      IMAGE_DIRS: "Images/NationIcons Images/UnitIcons"

    steps:
      # Step 1: Check out your repository code
      # This allows the workflow to access the files in your repo.
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      # We'll use a Node.js-based command-line tool to create the tilemap.
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install the 'atlast' tool
      # 'atlast' is a command-line tool for creating texture atlases (sprite sheets).
      # We install it globally so we can use it from the command line.
      - name: Install atlast
        run: npm install -g atlast

      # Step 4: Generate the tilemap and atlas
      # - It creates a temporary 'staging' directory to collect all images.
      # - It loops through the directories in IMAGE_DIRS and copies images to the staging area.
      # - It checks if any images were found before attempting to generate the atlas.
      # - Finally, 'free-tex-packer-cli' is run on the staging directory.
      - name: Generate tilemap and atlas
        run: |
          mkdir -p staging_dir
          images_found=false
          for dir in $IMAGE_DIRS; do
            # Check if directory exists and has images
            if [ -d "$dir" ] && [ -n "$(find "$dir" -maxdepth 1 -name '*.png' -o -name '*.jpg' -o -name '*.jpeg')" ]; then
              echo "Copying images from $dir..."
              find "$dir" -maxdepth 1 -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -exec cp {} staging_dir/ \;
              images_found=true
            else
              echo "Warning: Directory '$dir' is empty or does not exist."
            fi
          done

          if [ "$images_found" = true ]; then
            echo "Generating atlas from staged images..."
            mkdir -p output
            atlast set directory 'staging_dir'
            atlast set outputImageName 'output/atlas.png'
            atlast set outputJSONName 'output/atlas.json'
            atlast 
          else
            echo "No images found in any of the specified directories. Skipping atlas generation."
          fi

      # Step 5: Commit the generated files to the repository
      # This step will add the 'atlas.png' and 'atlas.json' to your repo.
      # It will only create a commit if the files have changed.
      - name: Commit files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update tilemap and atlas"
          file_pattern: output/atlas.png output/atlas.json
