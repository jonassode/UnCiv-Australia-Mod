# .github/workflows/create_tilemap.yml
name: Create Tilemap and Atlas

# Controls when the action will run. 
# This example triggers the workflow on push events to the "main" branch.
# You can change this to run on a schedule, on pull requests, or manually.
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  generate-tilemap:
    runs-on: ubuntu-latest
    
    # Environment variables can be used to easily configure the workflow.
    # Add the paths to your image folders here, separated by spaces.
    env:
      IMAGE_DIRS: "Images/NationIcons Images/UnitIcons"

    steps:
      # Step 1: Check out your repository code
      # This allows the workflow to access the files in your repo.
      - name: Check out repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      # We'll use a Node.js-based command-line tool to create the tilemap.
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install the 'atlast' tool
      # 'atlast' is a command-line tool for creating texture atlases (sprite sheets).
      # We install it globally so we can use it from the command line.
      - name: Install atlast
        run: npm install -g atlast

      # Step 4: Run atlast to generate the tilemap and atlas
      # This is the core step of the workflow.
      #
      # - It first creates a temporary 'staging' directory.
      # - It then loops through the list of directories defined in the IMAGE_DIRS environment variable.
      # - All images from these directories are copied into the staging directory.
      # - Finally, 'atlast' is run on the staging directory to produce a single combined tilemap and atlas.
      - name: Generate tilemap and atlas
        run: |
          mkdir -p staging_dir
          for dir in $IMAGE_DIRS; do
            echo "Scanning directory: $dir"
            # Copy all image files from the source directory to the staging directory
            # Using find to handle cases where the directory might be empty.
            find $dir -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | xargs -I {} cp {} staging_dir/
          done
          mkdir -p output
          atlast staging_dir output

      # Step 5: Commit the generated files to the repository
      # This step will add the 'atlas.png' and 'atlas.json' to your repo.
      # It will only create a commit if the files have changed.
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add output/atlas.png output/atlas.json
          # The following command will fail if there are no changes, so we add `|| exit 0`
          git commit -m "Update tilemap and atlas" -a || exit 0
          git push
